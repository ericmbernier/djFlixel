/***********************************************************************
 * Simple graphic button with 3 states ( normal | hover | pressed )
 * 
 * - Be defaults gets built in djFlixel graphics and uses scale9 scaling
 * - Touch and Mouse button consisting of a background and a foreground.
 * - The background can be a tileset image of the 3 states, variable size
 * - The foreground can be autogenerated text, or an flxsprite
 * - Make sure the FG color of the icons is WHITE, the tinting is altered at runtime
 * 
 * 
 *********************************************************************/

 /// -- DO NOT USE -- IN DEVELOPMENT --
 /// -- DO NOT USE -- IN DEVELOPMENT --
 /// -- DO NOT USE -- IN DEVELOPMENT --
 /// -- DO NOT USE -- IN DEVELOPMENT --
 /// -- DO NOT USE -- IN DEVELOPMENT --
 
package djFlixel.ui;

import djA.DataT;
import flash.display.BitmapData;
import flash.geom.Rectangle;
import flixel.FlxG;
import flixel.FlxSprite;
import flixel.group.FlxSpriteGroup;
import flixel.input.mouse.FlxMouseEventManager;

class UIButton extends FlxSpriteGroup
{
	// --
	inline static var STATE_NORMAL:Int = 0;
	inline static var STATE_HOVER:Int = 1;
	inline static var STATE_PRESS:Int = 2;
	
	// The default colors that are going to be replaced if you set `colorBG`
	static var TEMPLATE_COLOR_MAP:Array<Int> = [
		0xFF000000,	//  Border
		0xFF0000FF, //  Dark
		0xFFFF0000, //  Main
		0xFFFFFFFF  //  Highlight
	];
	
	// Defaults
	static var DEF_PAR = {
		sid:null,
		colors:[
			0xFF111111,
			0xFF3A3D49,
			0xFFB4B6C0,
			0xFFEAEBEE
		],
	};
	
	// -- The BG and FG elements
	var spr_bg:FlxSprite = null;
	var spr_fg:FlxSprite = null;
	
	public var sid(default, null):String;
	
	// 0:Normal, 1:Hover, 2:Pressed
	public var current_state(default, null):Int = -1;
	// -
	public var onPress:UIButton->Void = null;
	public var onRelease:UIButton->Void = null;
	public var onHover:UIButton->Void = null;
	public var onOut:UIButton->Void = null;
	
	// Running Parameters
	var P:Dynamic;
	
	var BITS:Array<BitmapData> = [];
	
	/**
	 * @param	Id a Unique string identifier
	 * @param	Style Check incode below, you can override parts
	 */
	public function new(X:Float = 0, Y:Float = 0, WIDTH:Int = 32, HEIGHT:Int = 32, ?PAR:Dynamic)
	{
		super(X, Y);

		P = DataT.copyFields(PAR, Reflect.copy(DEF_PAR));
		ID = P.sid;
		
		// -- Create the button BG
		var _r = new Rectangle(8, 8, 8, 8);
		for (i in 0...3)
		{
			BITS.push(D.bmu.scale9(D.ui.atlas.get_bn('btn', i), _r, WIDTH, HEIGHT));
			D.bmu.replaceColors(BITS[i], TEMPLATE_COLOR_MAP, P.colors);
		}
		spr_bg = new FlxSprite(0, 0);
		spr_bg.makeGraphic(WIDTH, HEIGHT, 0x00000000, true);
		add(spr_bg);
		_setState(STATE_NORMAL);
		
		// --
		#if FLX_MOUSE
			// Mouse and touch
			FlxMouseEventManager.add(spr_bg, _onPress, _onRelease, _onHover, _onOut);
		#else
			// Just touch
			FlxMouseEventManager.add(spr_bg, _onPress, _onRelease);
		#end
	}//---------------------------------------------------;
	
	
	/**
	 * Change the graphics and state
	 * @param	s 0:normal, 1:hover, 2:press
	 */
	function _setState(s:Int)
	{
		if (current_state == s) return;
		current_state = s;
		D.bmu.copyOn(BITS[s], spr_bg.pixels);
		spr_bg.dirty = true;
		//if (flag_fg_color_states) {
			//spr_fg.color = style.colorsFG[s];
		//}
	}//---------------------------------------------------;
	
	function _onPress(D:Dynamic)
	{
		_setState(STATE_PRESS);
		if (onPress != null) onPress(this);
	}//---------------------------------------------------;
	
	function _onRelease(D:Dynamic)
	{
		if (current_state != STATE_PRESS) return; // release from pressed
		
		// Go to hover or normal ??
		#if FLX_MOUSE 
			#if FLX_TOUCH
				// Set to hover if released by mouse
				if (FlxG.mouse.overlaps(spr_bg, spr_bg.camera))
					_setState(STATE_HOVER);
				else
					_setState(STATE_NORMAL);
			#else
				_setState(STATE_HOVER);
			#end
		#else // Just Touch
			_setState(STATE_NORMAL);
		#end
		
		if (onRelease != null) onRelease(this);
	}//---------------------------------------------------;
	
	
	#if FLX_MOUSE
	function _onHover(D:Dynamic)
	{
		_setState(STATE_HOVER);
		if (onHover != null) onHover(this);
	}//---------------------------------------------------;	
	
	function _onOut(D:Dynamic)
	{
		_setState(STATE_NORMAL);
		if (onOut != null) onOut(this);
	}//---------------------------------------------------;
	#end
	
}// --